类/模块
Socket		低层网络接口（每个 BSD API）
SocketServer	提供简化网络服务器开发的类

Socket 模块的实例方法 :
sock.bind( (adrs, port) )	将 socket 绑定到一个地址和端口上
sock.accept()			返回一个客户机 socket（带有客户机端的地址信息）
sock.listen(backlog)		将 socket 设置成监听模式，能够监听 backlog 外来的连接请求
sock.connect( (adrs, port) )	将 socket 连接到定义的主机和端口上
sock.recv( buflen[, flags] )	从 socket 中接收数据，最多 buflen 个字符
sock.recvfrom( buflen[, flags] )	从 socket 中接收数据，最多 buflen 个字符，同时返回数据来源的远程主机和端口号
sock.send( data[, flags] )		通过 socket 发送数据
sock.sendto( data[, flags], addr )	通过 socket 发送数据
sock.close()				关闭 socket
sock.getsockopt( lvl, optname )		获得指定 socket 选项的值
sock.setsockopt( lvl, optname, val )	设置指定 socket 选项的


网络协议： http://wiki.woodpecker.org.cn/moin/PythonStandardLib/chpt7#A1.2._socket_.2BaiFXVw-
网络编程： http://chenzhongke.com/wi/Python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B


----------------------------------

总结一下一般的TCP和UDP连接服务器和客户端的内容和步骤。

TCP服务器端：
   1 创建套接字，绑定套接字到当地地址，然后开始监听连接。就是socket，bind，listen。
   2 进入循环，不断接受客户端的连接请求，然后接收传来的数据，当然也可以发送给对方数据。就是accept一个连接，然后recv数据。
   3 接收完毕可以关闭套接字，close。

伪代码如下：
    ss=socket()    #创建服务器套接字
	ss.bind()       #把本地地址绑到套接字上
	ss.listen()      #监听连接
	inf_loop:       #服务器无限循环
	cs=ss.accept()   #接受客户端的连接
	comm._loop:     #通信循环
	cs.recv()/cs.send()  #对话
	cs.close()         #关闭客户套接字
	ss.close()         #关闭服务器套接字


TCP客户端：
   1 创建套接字，然后连接远端地址，socket ，connect。
   2 建立连接之后开始发送数据。Send（data），当然可以从缓冲区读取服务器发来的数据。Recv（BUFF）
   3 完毕后，关闭套接字。Close

伪代码如下：
    cs=socket()       #创建客户套接字
    cs.connect()       #尝试连接服务器
    comm._loop:     #通信循环
    cs.send()/cs.recv()  #对话
    cs.close()          #关闭套接字

---------------------------------

UDP服务器端：
   1 创建套接字，并绑定到当地地址 socket，bing
   2 直接接收数据从buffer。Recvfrom（），这个函数接受到数据，和sender的地址（主机号，端口号），当然也可以发送数据到客户端，用sendto（data，addr）
   3 关闭套接字 close（）

伪代码：
    Ss=socket()    #创建套接字
    ss.bind()      #绑定
    inf_loop:      #无限循环
    ss.recvfrom()/sendto()  #对话
    ss.close()      #关闭套接字

UDP客户端：
   1 创建套接字，socket
   2 进入循环，发送接收数据 sendto ，recvfrom
   3 关闭套接字 close（）

伪代码：
    Cs=socket()   #创建
    Comm_loop:   #循环接收发送
    Cs.sendto()/recvfrom() #对话
    Cs.close()     #关闭
 
-------------------------------------

Send（） sendto（） recv（）recvfrom（）

在TCP连接中我们发生接收数据都是用的send（）和recv（）方法;
在UDP中用的sendto（）和recvfrom（）
这两对方法实现的作用差不多，但是参数有所不同，

TCP中，send（data）和recv（buffer），因为在TCP中，传输数据之前连接已经建立，也就是说我们知道给谁发，或者收谁的数据。
UDP中，recvfrom（buffer）和sendto（data，addr），recvfrom可以接受到sender的addr，然后发送时，根据addr发送。
因为UDP不是面向连接的，所以我们必须知道这个数据要发给谁，它的地址什么。

socket.makefile([mode[, bufsize]]) 可以将Socket包装成类似文件的对象

